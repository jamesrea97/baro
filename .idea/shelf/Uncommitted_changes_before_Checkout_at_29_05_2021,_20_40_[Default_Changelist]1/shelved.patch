Index: app/src/main/java/com/baro/ui/share/UploadActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.share\n\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nimport com.baro.R\n\n\nclass UploadActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_upload)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/baro/ui/share/UploadActivity.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/firebase/FirebaseUploadActivity.kt	(date 1622312380187)
@@ -1,4 +1,4 @@
-package com.baro.ui.share
+package com.baro.ui.share.firebase
 
 import android.os.Bundle
 import androidx.appcompat.app.AppCompatActivity
@@ -6,7 +6,7 @@
 import com.baro.R
 
 
-class UploadActivity : AppCompatActivity() {
+class FirebaseUploadActivity : AppCompatActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_upload)
Index: app/src/main/java/com/baro/ui/share/WifiDirectPeerReceiveFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.share\n\nimport androidx.fragment.app.Fragment\nimport android.os.Build\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.*\nimport androidx.annotation.RequiresApi\nimport com.baro.R\n\n\nclass WifiDirectPeerReceiveFragment : Fragment() {\n\n    private lateinit var wifiDirectStatus: ImageView\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n\n        var view =  inflater.inflate(R.layout.fragment_wifi_direct_receive_connext, container, false)\n\n        configureWifiDirectStatusImage(view)\n        return view\n    }\n\n    private fun configureWifiDirectStatusImage(view: View) {\n        wifiDirectStatus = view.findViewById(R.id.img_wifidirect_connection_status)\n\n    }\n\n    companion object {\n\n        @JvmStatic\n        fun newInstance() =\n            WifiDirectPeerReceiveFragment().apply {\n            }\n    }\n\n    fun changeWifiDirectStatus(isConnected: Boolean) {\n        if(isConnected) {\n            wifiDirectStatus.setImageResource(R.drawable.ic_wifi)\n        } else {\n            wifiDirectStatus.setImageResource(R.drawable.ic_wifi_off)\n        }\n    }\n\n}
===================================================================
--- app/src/main/java/com/baro/ui/share/WifiDirectPeerReceiveFragment.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/p2p/WifiDirectPeerReceiveFragment.kt	(date 1622312342881)
@@ -1,4 +1,4 @@
-package com.baro.ui.share
+package com.baro.ui.share.p2p
 
 import androidx.fragment.app.Fragment
 import android.os.Build
Index: app/src/main/java/com/baro/ui/share/WifiDirectActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.share\n\nimport android.Manifest\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.IntentFilter\nimport android.content.pm.PackageManager\nimport android.net.wifi.p2p.WifiP2pConfig\nimport android.net.wifi.p2p.WifiP2pDevice\nimport android.net.wifi.p2p.WifiP2pInfo\nimport android.net.wifi.p2p.WifiP2pManager\nimport android.os.Bundle\nimport android.widget.ImageButton\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport com.baro.R\nimport com.baro.constants.AppCodes\nimport com.baro.constants.AppTags\n\n\nclass WifiDirectActivity : AppCompatActivity(), WifiP2pManager.ConnectionInfoListener {\n\n    // WifiDirect\n    private val manager: WifiP2pManager? by lazy(LazyThreadSafetyMode.NONE) {\n        getSystemService(Context.WIFI_P2P_SERVICE) as WifiP2pManager?\n    }\n    private var channel: WifiP2pManager.Channel? = null\n    private var receiver: BroadcastReceiver? = null\n\n    private var isReceiving: Boolean = false\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_wifi_direct)\n\n        getUserIntent()\n        configureView()\n\n        initWifiP2P()\n        discoverPeers()\n    }\n\n    private fun getUserIntent() {\n        val userIntent = intent.extras?.get(AppTags.WIFIP2P_INTENT.name)\n        isReceiving = userIntent != AppCodes.WIFIP2P_PEER_SEND.code\n    }\n\n\n    private fun configureView() {\n        if (isReceiving) {\n            val peerReceiveFragment: WifiDirectPeerReceiveFragment =\n                WifiDirectPeerReceiveFragment.newInstance()\n\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_view, peerReceiveFragment, null)\n                .setReorderingAllowed(true)\n                .commit()\n        } else {\n            val peerSendFragment: WifiDirectPeerSendFragment =\n                WifiDirectPeerSendFragment.newInstance()\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_view, peerSendFragment, null)\n                .setReorderingAllowed(true)\n                .commit()\n        }\n    }\n\n\n    private fun discoverPeers() {\n        if (ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            // TODO: Consider calling\n            //    ActivityCompat#requestPermissions\n            // here to request the missing permissions, and then overriding\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n            //                                          int[] grantResults)\n            // to handle the case where the user grants the permission. See the documentation\n            // for ActivityCompat#requestPermissions for more details.\n            return\n        }\n        manager?.discoverPeers(channel, object : WifiP2pManager.ActionListener {\n\n            override fun onSuccess() {\n                Toast.makeText(applicationContext, \"DEBUG: Discovering peers\", Toast.LENGTH_LONG).show()\n            }\n\n            override fun onFailure(reasonCode: Int) {\n                Toast.makeText(applicationContext, \"DEBUG: Cannot discover peers\", Toast.LENGTH_LONG).show()\n            }\n        })\n\n    }\n\n    private fun initWifiP2P() {\n        channel = manager?.initialize(this, mainLooper, null)\n        channel?.also { channel ->\n            receiver = manager?.let { WiFiDirectBroadcastReceiver(it, channel, this) }\n        }\n    }\n\n    private val intentFilter = IntentFilter().apply {\n        addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION)\n        addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION)\n        addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION)\n        addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION)\n    }\n\n\n    /* register the broadcast receiver with the intent values to be matched */\n    override fun onResume() {\n        super.onResume()\n        receiver?.also { receiver ->\n            registerReceiver(receiver, intentFilter)\n        }\n    }\n\n    /* unregister the broadcast receiver */\n    override fun onPause() {\n        super.onPause()\n        receiver?.also { receiver ->\n            unregisterReceiver(receiver)\n        }\n\n        if (!isReceiving) {\n            // Stops connection between devices\n            manager?.removeGroup(channel, object : WifiP2pManager.ActionListener {\n                override fun onFailure(reasonCode: Int) {\n                    Toast.makeText(\n                        applicationContext,\n                        \"DEBUG: Could not disconnect devices Reason :$reasonCode\", Toast.LENGTH_LONG\n                    ).show()\n\n                }\n\n                override fun onSuccess() {\n                    Toast.makeText(\n                        applicationContext,\n                        \"DEBUG: Device disconnected\", Toast.LENGTH_LONG\n                    ).show()\n                }\n\n            })\n        }\n    }\n\n\n    // Notify WifiDirectPeerConnectFragment\n    fun wifiDirectStatusUpdate(wifiDirectConnected: Boolean) {\n        if (isReceiving) {\n            val wifiDirectPeerReceiveFragment = supportFragmentManager\n                .findFragmentById(R.id.fragment_container_view) as WifiDirectPeerReceiveFragment?\n            wifiDirectPeerReceiveFragment?.changeWifiDirectStatus(wifiDirectConnected)\n        } else {\n            val wifiDirectPeerSendFragment = supportFragmentManager\n                .findFragmentById(R.id.fragment_container_view) as WifiDirectPeerSendFragment?\n            wifiDirectPeerSendFragment?.changeWifiDirectStatus(wifiDirectConnected)\n        }\n    }\n\n    fun updateWifiP2PDeviceList(wifiP2pDeviceList: MutableCollection<WifiP2pDevice>) {\n        if (!isReceiving) {\n            val wifiDirectPeerSendFragment = supportFragmentManager\n                .findFragmentById(R.id.fragment_container_view) as WifiDirectPeerSendFragment\n            wifiDirectPeerSendFragment.updateWifiP2PDeviceList(wifiP2pDeviceList)\n        }\n    }\n\n\n    fun connectDevice(device: WifiP2pDevice) {\n        val config = WifiP2pConfig()\n\n        config.deviceAddress = device.deviceAddress\n        channel?.also { channel ->\n            if (ActivityCompat.checkSelfPermission(\n                    this,\n                    Manifest.permission.ACCESS_FINE_LOCATION\n                ) != PackageManager.PERMISSION_GRANTED\n            ) {\n                // TODO: Consider calling\n                //    ActivityCompat#requestPermissions\n                // here to request the missing permissions, and then overriding\n                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n                //                                          int[] grantResults)\n                // to handle the case where the user grants the permission. See the documentation\n                // for ActivityCompat#requestPermissions for more details.\n                return\n            }\n            if (!isReceiving) {\n                manager?.createGroup(channel, object : WifiP2pManager.ActionListener {\n                    override fun onSuccess() {\n                        Toast.makeText(applicationContext, \"DEBUG: Connected to \" + device.deviceName, Toast.LENGTH_LONG).show()\n                    }\n\n                    override fun onFailure(reason: Int) {\n                        Toast.makeText(applicationContext, \"DEBUG: No connection established\", Toast.LENGTH_LONG).show()\n\n                    }\n                })\n            }\n\n\n//            manager?.connect(channel, config, object : WifiP2pManager.ActionListener {\n//\n//                override fun onSuccess() {\n//                    Toast.makeText(applicationContext, \"DEBUG: Connected to \" + device.deviceName, Toast.LENGTH_LONG).show()\n//                }\n//\n//                override fun onFailure(reason: Int) {\n//                    Toast.makeText(applicationContext, \"DEBUG: No connection established\", Toast.LENGTH_LONG).show()\n//                }\n//            })\n        }\n    }\n\n    override fun onConnectionInfoAvailable(p0: WifiP2pInfo?) {\n        Toast.makeText(applicationContext, \"DEBUG: No connection established\", Toast.LENGTH_LONG).show()\n    }\n\n}
===================================================================
--- app/src/main/java/com/baro/ui/share/WifiDirectActivity.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/p2p/WifiDirectActivity.kt	(date 1622312380179)
@@ -1,4 +1,4 @@
-package com.baro.ui.share
+package com.baro.ui.share.p2p
 
 import android.Manifest
 import android.content.BroadcastReceiver
@@ -10,7 +10,6 @@
 import android.net.wifi.p2p.WifiP2pInfo
 import android.net.wifi.p2p.WifiP2pManager
 import android.os.Bundle
-import android.widget.ImageButton
 import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.app.ActivityCompat
@@ -201,18 +200,6 @@
                     }
                 })
             }
-
-
-//            manager?.connect(channel, config, object : WifiP2pManager.ActionListener {
-//
-//                override fun onSuccess() {
-//                    Toast.makeText(applicationContext, "DEBUG: Connected to " + device.deviceName, Toast.LENGTH_LONG).show()
-//                }
-//
-//                override fun onFailure(reason: Int) {
-//                    Toast.makeText(applicationContext, "DEBUG: No connection established", Toast.LENGTH_LONG).show()
-//                }
-//            })
         }
     }
 
Index: app/src/main/java/com/baro/ui/share/BluetoothReceiveActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/baro/ui/share/BluetoothReceiveActivity.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/BluetoothReceiveActivity.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
@@ -1,14 +0,0 @@
-package com.baro.ui.share
-
-import android.os.Bundle
-import androidx.appcompat.app.AppCompatActivity
-
-import com.baro.R
-
-
-class BluetoothReceiveActivity : AppCompatActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_bluetooth_receive)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/baro/ui/share/BluetoothSendActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/baro/ui/share/BluetoothSendActivity.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/BluetoothSendActivity.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
@@ -1,13 +0,0 @@
-package com.baro.ui.share
-
-import android.os.Bundle
-import androidx.appcompat.app.AppCompatActivity
-
-import com.baro.R
-
-class BluetoothSendActivity : AppCompatActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_bluetooth_send)
-    }
-}
\ No newline at end of file
Index: app/src/main/res/layout/activity_wifi_direct.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.share.WifiDirectActivity\">\n\n    <androidx.fragment.app.FragmentContainerView\n        android:id=\"@+id/fragment_container_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n</androidx.constraintlayout.widget.ConstraintLayout>
===================================================================
--- app/src/main/res/layout/activity_wifi_direct.xml	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/res/layout/activity_wifi_direct.xml	(date 1622312328202)
@@ -4,7 +4,7 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".ui.share.WifiDirectActivity">
+    tools:context=".ui.share.p2p.WifiDirectActivity">
 
     <androidx.fragment.app.FragmentContainerView
         android:id="@+id/fragment_container_view"
Index: app/src/main/java/com/baro/ui/share/ShareActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.share\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.widget.ImageButton\nimport androidx.appcompat.app.AppCompatActivity\n\nimport com.baro.R\n\nclass ShareActivity : AppCompatActivity() {\n    private lateinit var internetButton: ImageButton\n    private lateinit var localButton: ImageButton\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_share)\n        configureInternetButton()\n        configureLocalButton()\n    }\n\n    private fun configureInternetButton() {\n        internetButton = findViewById(R.id.btn_internet)\n        internetButton.setOnClickListener{\n            val intent = Intent(this, UploadActivity::class.java)\n            startActivity(intent)\n        }\n    }\n\n    private fun configureLocalButton() {\n        localButton = findViewById(R.id.btn_local)\n        localButton.setOnClickListener{\n            val intent = Intent(this, SendReceiveActivity::class.java)\n            startActivity(intent)\n        }\n\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/baro/ui/share/ShareActivity.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/ShareActivity.kt	(date 1622312380199)
@@ -6,6 +6,8 @@
 import androidx.appcompat.app.AppCompatActivity
 
 import com.baro.R
+import com.baro.ui.share.firebase.FirebaseUploadActivity
+import com.baro.ui.share.p2p.WifiDirectSendReceiveActivity
 
 class ShareActivity : AppCompatActivity() {
     private lateinit var internetButton: ImageButton
@@ -20,7 +22,7 @@
     private fun configureInternetButton() {
         internetButton = findViewById(R.id.btn_internet)
         internetButton.setOnClickListener{
-            val intent = Intent(this, UploadActivity::class.java)
+            val intent = Intent(this, FirebaseUploadActivity::class.java)
             startActivity(intent)
         }
     }
@@ -28,7 +30,7 @@
     private fun configureLocalButton() {
         localButton = findViewById(R.id.btn_local)
         localButton.setOnClickListener{
-            val intent = Intent(this, SendReceiveActivity::class.java)
+            val intent = Intent(this, WifiDirectSendReceiveActivity::class.java)
             startActivity(intent)
         }
 
Index: app/src/main/java/com/baro/ui/share/WiFiDirectBroadcastReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.share\n\nimport android.Manifest\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.wifi.p2p.WifiP2pDeviceList\nimport android.net.wifi.p2p.WifiP2pManager\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport androidx.core.app.ActivityCompat\n\n\nclass WiFiDirectBroadcastReceiver(\n    private val manager: WifiP2pManager,\n    private val channel: WifiP2pManager.Channel,\n    private val activity: WifiDirectActivity\n) : BroadcastReceiver() {\n\n    @RequiresApi(Build.VERSION_CODES.M)\n    override fun onReceive(context: Context, intent: Intent) {\n        when (intent.action) {\n            WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION -> {\n                when (intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1)) {\n                    WifiP2pManager.WIFI_P2P_STATE_ENABLED -> {\n                        activity.wifiDirectStatusUpdate(wifiDirectConnected=true)\n                    }\n                    else -> {\n                        activity.wifiDirectStatusUpdate(wifiDirectConnected=false)\n                    }\n                }\n            }\n\n            WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION -> {\n                if (ActivityCompat.checkSelfPermission(\n                        activity,\n                        Manifest.permission.ACCESS_FINE_LOCATION\n                    ) != PackageManager.PERMISSION_GRANTED\n                ) {\n                    // TODO: Consider calling\n                    //    ActivityCompat#requestPermissions\n                    // here to request the missing permissions, and then overriding\n                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n                    //                                          int[] grantResults)\n                    // to handle the case where the user grants the permission. See the documentation\n                    // for ActivityCompat#requestPermissions for more details.\n                    return\n                }\n                manager?.requestPeers(channel) { peers: WifiP2pDeviceList? ->\n                    // Handle peers list\n                    peers?.let { activity.updateWifiP2PDeviceList(it.deviceList) }\n                }\n            }\n            WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION -> {\n                // Respond to new connection or disconnections\n\n                manager.requestConnectionInfo(channel, activity);\n\n            }\n            WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION -> {\n                // Respond to this device's wifi state changing\n            }\n        }\n    }\n}
===================================================================
--- app/src/main/java/com/baro/ui/share/WiFiDirectBroadcastReceiver.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/p2p/WiFiDirectBroadcastReceiver.kt	(date 1622312342885)
@@ -1,4 +1,4 @@
-package com.baro.ui.share
+package com.baro.ui.share.p2p
 
 import android.Manifest
 import android.content.BroadcastReceiver
Index: app/src/main/java/com/baro/ui/share/WifiDirectPeerSendFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.share\n\nimport android.app.Activity\nimport androidx.fragment.app.Fragment\nimport android.net.wifi.p2p.WifiP2pDevice\nimport android.os.Build\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.*\nimport android.widget.AdapterView.OnItemClickListener\nimport androidx.annotation.RequiresApi\nimport com.baro.R\nimport com.baro.adapters.DeviceAdapter\nimport java.lang.ref.WeakReference\n\n\nclass WifiDirectPeerSendFragment : Fragment() {\n\n    private lateinit var peerListView: ListView\n    private lateinit var wifiDirectStatus: ImageView\n\n\n    // Adapter\n    private lateinit var adapter: DeviceAdapter\n    private var devices = ArrayList<WifiP2pDevice>()\n\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n\n        var view =  inflater.inflate(R.layout.fragment_wifi_direct_send_connect, container, false)\n\n        configurePeerListView(view)\n        configureWifiDirectStatusImage(view)\n        return view\n    }\n\n    private fun configureWifiDirectStatusImage(view: View) {\n        wifiDirectStatus = view.findViewById(R.id.img_wifidirect_connection_status)\n    }\n\n    private fun configurePeerListView(view: View){\n        peerListView = view.findViewById(R.id.rv_device_list)\n        val weakActivity = WeakReference<Activity>(activity)\n        adapter = DeviceAdapter(weakActivity, devices)\n        peerListView.adapter = adapter\n\n        peerListView.onItemClickListener = OnItemClickListener { _, _, position, _ ->\n            (activity as WifiDirectActivity).connectDevice(devices[position])\n            }\n     }\n\n\n    companion object {\n\n        @JvmStatic\n        fun newInstance() =\n            WifiDirectPeerSendFragment().apply {\n            }\n    }\n\n    fun changeWifiDirectStatus(isConnected: Boolean) {\n        if(isConnected) {\n            wifiDirectStatus.setImageResource(R.drawable.ic_wifi)\n        } else {\n            wifiDirectStatus.setImageResource(R.drawable.ic_wifi_off)\n        }\n    }\n\n    fun updateWifiP2PDeviceList(wifiP2pDeviceList: MutableCollection<WifiP2pDevice>) {\n        for (device in wifiP2pDeviceList) {\n            if (device !in devices) {\n                devices.add(device)\n            }\n        }\n        adapter.notifyDataSetChanged()\n    }\n}
===================================================================
--- app/src/main/java/com/baro/ui/share/WifiDirectPeerSendFragment.kt	(revision 6b59a0b075b9839b2d998e88d43e82a59ca84a51)
+++ app/src/main/java/com/baro/ui/share/p2p/WifiDirectPeerSendFragment.kt	(date 1622312342873)
@@ -1,4 +1,4 @@
-package com.baro.ui.share
+package com.baro.ui.share.p2p
 
 import android.app.Activity
 import androidx.fragment.app.Fragment
