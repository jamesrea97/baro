Index: app/src/main/java/com/baro/ui/share/p2p/WifiDirectActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.share.p2p\n\nimport android.Manifest\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.IntentFilter\nimport android.content.pm.PackageManager\nimport android.net.wifi.p2p.*\nimport android.os.Bundle\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport com.baro.R\nimport com.baro.constants.AppCodes\nimport com.baro.constants.AppTags\nimport com.baro.helpers.AsyncHelpers\nimport com.baro.helpers.interfaces.OnClientInetAddressReceived\nimport com.baro.helpers.interfaces.OnClientInetAddressSent\nimport com.baro.models.Course\nimport java.net.InetAddress\nimport java.util.*\n\n\n\nclass WifiDirectActivity : AppCompatActivity(), WifiP2pManager.ConnectionInfoListener,\n    OnClientInetAddressReceived, OnClientInetAddressSent {\n\n    private var course: Course? = null\n\n    // WifiDirect\n    private val manager: WifiP2pManager? by lazy(LazyThreadSafetyMode.NONE) {\n        getSystemService(Context.WIFI_P2P_SERVICE) as WifiP2pManager?\n    }\n    private var channel: WifiP2pManager.Channel? = null\n    private var receiver: BroadcastReceiver? = null\n\n    private var isReceiving: Boolean = false\n    private var isSetUp: Boolean? = null\n\n    private var otherDeviceInetAddress: InetAddress? = null\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_wifi_direct)\n\n        getUserIntent()\n        configureView()\n\n        initWifiP2P()\n        discoverPeers()\n    }\n\n    private fun getUserIntent() {\n        isReceiving = intent.extras?.get(AppTags.WIFIP2P_INTENT.name) != AppCodes.WIFIP2P_PEER_SEND.code\n\n        if (!isReceiving){\n            course = intent.getParcelableExtra(AppTags.COURSE_OBJECT.name) as Course\n        }\n\n    }\n\n\n    private fun configureView() {\n\n        if (!isReceiving){\n            val peerConnectionSelectionFragment: WifiDirectPeerConnectionSelectionFragment =\n                WifiDirectPeerConnectionSelectionFragment.newInstance()\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_peer_connection, peerConnectionSelectionFragment, null)\n                .commit()\n        } else{\n            val peerConnectionWaitingRoomFragment: WifiDirectPeerConnectionWaitingRoomFragment =\n                WifiDirectPeerConnectionWaitingRoomFragment.newInstance()\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_peer_connection, peerConnectionWaitingRoomFragment, null)\n                .commit()\n        }\n    }\n\n\n    private fun discoverPeers() {\n        if (ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            // TODO: Consider calling\n            //    ActivityCompat#requestPermissions\n            // here to request the missing permissions, and then overriding\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n            //                                          int[] grantResults)\n            // to handle the case where the user grants the permission. See the documentation\n            // for ActivityCompat#requestPermissions for more details.\n            return\n        }\n        manager?.discoverPeers(channel, object : WifiP2pManager.ActionListener {\n\n            override fun onSuccess() {\n                Toast.makeText(applicationContext, \"DEBUG: Discovering peers\", Toast.LENGTH_LONG)\n                    .show()\n            }\n\n            override fun onFailure(reasonCode: Int) {\n                Toast.makeText(\n                    applicationContext,\n                    \"DEBUG: Cannot discover peers\",\n                    Toast.LENGTH_LONG\n                ).show()\n            }\n        })\n\n    }\n\n    private fun initWifiP2P() {\n        channel = manager?.initialize(this, mainLooper, null)\n        channel?.also { channel ->\n            receiver = manager?.let { WiFiDirectBroadcastReceiver(it, channel, this) }\n        }\n    }\n\n    private val intentFilter = IntentFilter().apply {\n        addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION)\n        addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION)\n        addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION)\n        addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION)\n    }\n\n\n    /* register the broadcast receiver with the intent values to be matched */\n    override fun onResume() {\n        super.onResume()\n        receiver?.also { receiver ->\n            registerReceiver(receiver, intentFilter)\n        }\n    }\n\n    /* unregister the broadcast receiver */\n    override fun onPause() {\n        super.onPause()\n        receiver?.also { receiver ->\n            unregisterReceiver(receiver)\n        }\n\n        manager!!.removeGroup(channel, object : WifiP2pManager.ActionListener {\n            override fun onSuccess() {\n                Toast.makeText(\n                    applicationContext,\n                    \"DEBUG: Device disconnected\", Toast.LENGTH_LONG\n                ).show()\n            }\n\n            override fun onFailure(reason: Int) {\n                Toast.makeText(\n                    applicationContext,\n                    \"DEBUG: Could not disconnect devices Reason :$reason\", Toast.LENGTH_LONG\n                ).show()\n            }\n        })\n    }\n\n    // Notify WifiDirectPeerConnectFragment\n    fun wifiDirectStatusUpdate(wifiDirectConnected: Boolean) {\n        if (!isReceiving) {\n            val wifiDirectPeerConnectionFragment = supportFragmentManager\n                .findFragmentById(R.id.fragment_container_peer_connection) as WifiDirectPeerConnectionSelectionFragment?\n            wifiDirectPeerConnectionFragment?.changeWifiDirectStatus(wifiDirectConnected)\n        } else {\n            val wifiDirectPeerWaitingRoomFragment = supportFragmentManager\n                .findFragmentById(R.id.fragment_container_peer_connection) as WifiDirectPeerConnectionWaitingRoomFragment?\n            wifiDirectPeerWaitingRoomFragment?.changeWifiDirectStatus(wifiDirectConnected)\n        }\n\n    }\n\n    fun updateWifiP2PDeviceList(wifiP2pDeviceList: MutableCollection<WifiP2pDevice>) {\n        if(!isReceiving) {\n            val wifiDirectPeerConnectionFragment = supportFragmentManager\n                .findFragmentById(R.id.fragment_container_peer_connection) as WifiDirectPeerConnectionSelectionFragment\n            wifiDirectPeerConnectionFragment.updateWifiP2PDeviceList(wifiP2pDeviceList)\n        }\n    }\n\n\n    fun connectClientDevice(device: WifiP2pDevice) {\n        val config = WifiP2pConfig()\n\n        config.deviceAddress = device.deviceAddress\n        channel?.also { channel ->\n            if (ActivityCompat.checkSelfPermission(\n                    this,\n                    Manifest.permission.ACCESS_FINE_LOCATION\n                ) != PackageManager.PERMISSION_GRANTED\n            ) {\n                // TODO: Consider calling\n                //    ActivityCompat#requestPermissions\n                // here to request the missing permissions, and then overriding\n                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n                //                                          int[] grantResults)\n                // to handle the case where the user grants the permission. See the documentation\n                // for ActivityCompat#requestPermissions for more details.\n                return\n            }\n            manager?.connect(channel, config, object : WifiP2pManager.ActionListener {\n\n                override fun onSuccess() {\n                    Toast.makeText(\n                        applicationContext,\n                        \"DEBUG: Connection to \" + device.deviceName,\n                        Toast.LENGTH_LONG\n                    ).show()\n                }\n\n                override fun onFailure(reason: Int) {\n                    Toast.makeText(\n                        applicationContext,\n                        \"DEBUG: No connection established\",\n                        Toast.LENGTH_LONG\n                    ).show()\n                }\n            })\n        }\n    }\n\n    override fun onConnectionInfoAvailable(info: WifiP2pInfo?) {\n        if (isSetUp == null) {\n            if (info?.isGroupOwner == true && info?.groupFormed) {\n                Toast.makeText(\n                    applicationContext,\n                    \"DEBUG: GROUP OWNER\",\n                    Toast.LENGTH_LONG\n                ).show()\n                if (!isReceiving) {\n                    val dataReceiver = AsyncHelpers.GroupOwnerReceiveClientInetAddressAsyncTask(this)\n                    dataReceiver.execute()\n                } else {\n                    shareCourse()\n                }\n\n            } else {\n                otherDeviceInetAddress = info?.groupOwnerAddress\n                if (isReceiving) {\n                    val wifiReceiver = WifiDirectEndpoint(\n                        AsyncHelpers.GroupOwnerReceiveClientInetAddressAsyncTask.PORT_GET_CLIENT_INET,\n                        info?.groupOwnerAddress)\n                    val dataSender =\n                        AsyncHelpers.ClientSendInetAddressAsyncTask(wifiReceiver, this)\n                    dataSender.execute()\n                } else {\n                    shareCourse()\n                }\n            }\n        }\n\n\n    }\n\n\n    override fun onClientInetAddressReceived(clientInetAddress: InetAddress?) {\n        Toast.makeText(\n            applicationContext,\n            \"DEBUG: Received Client's IP: \" + clientInetAddress?.hostAddress,\n            Toast.LENGTH_LONG\n\n        ).show()\n        otherDeviceInetAddress = clientInetAddress\n        shareCourse()\n    }\n\n    override fun onClientInetAddressRSent() {\n        shareCourse()\n    }\n\n\n    private fun shareCourse() {\n        isSetUp = true\n        if (isReceiving) {\n            val receiveFragment: WifiDirectCourseReceiveFragment =\n                WifiDirectCourseReceiveFragment.newInstance()\n\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_send_receive, receiveFragment, null)\n                .addToBackStack(AppTags.RECEIVE_COURSE_FRAGMENT.name)\n                .setReorderingAllowed(true)\n                .commit()\n\n        } else {\n\n            val sendFragment: WifiDirectCourseSendFragment =\n                WifiDirectCourseSendFragment.newInstance(course, otherDeviceInetAddress)\n\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_send_receive, sendFragment, null)\n                .addToBackStack(AppTags.SEND_COURSE_FRAGMENT.name)\n                .setReorderingAllowed(true)\n                .commit()\n        }\n\n    }\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/baro/ui/share/p2p/WifiDirectActivity.kt	(revision 70cac004d659d6dfd3c79a18b60624c0614f8f29)
+++ app/src/main/java/com/baro/ui/share/p2p/WifiDirectActivity.kt	(date 1625413731434)
@@ -55,7 +55,7 @@
         isReceiving = intent.extras?.get(AppTags.WIFIP2P_INTENT.name) != AppCodes.WIFIP2P_PEER_SEND.code
 
         if (!isReceiving){
-            course = intent.getParcelableExtra(AppTags.COURSE_OBJECT.name) as Course
+            course = intent.getParcelableExtra(AppTags.COURSE_OBJECT.name) as Course?
         }
 
     }
Index: app/src/main/java/com/baro/ui/account/AccountActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.account\n\nimport android.app.Activity\nimport android.content.ContentResolver\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.widget.ImageButton\nimport android.widget.ImageView\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.baro.R\nimport com.baro.adapters.CourseAdapter\nimport com.baro.constants.AppTags\nimport com.baro.constants.FileEnum\nimport com.baro.constants.PermissionsEnum\nimport com.baro.helpers.AsyncHelpers\nimport com.baro.helpers.PermissionsHelper\nimport com.baro.helpers.interfaces.OnCourseCreate\nimport com.baro.helpers.AsyncHelpers.OnCourseDeleted\nimport com.baro.helpers.interfaceweaks.OnCreatorCourseCredentialsLoad\nimport com.baro.models.Course\nimport com.baro.models.User\nimport com.baro.ui.create.CreateCourseSummaryFragment\nimport com.baro.ui.create.EditCourseSummaryFragment\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.runBlocking\nimport java.lang.ref.WeakReference\nimport java.nio.file.Paths\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n\nclass AccountActivity : AppCompatActivity(), OnCreatorCourseCredentialsLoad,\n    CourseAdapter.OnCourseSelected, OnCourseDeleted, OnCourseCreate{\n    // UI\n    private lateinit var userThumbnailImageView: ImageView\n    private lateinit var followersButton: ImageButton\n    private lateinit var settingsButton: ImageButton\n    private lateinit var createButton: ImageButton\n    private lateinit var courseRecycleView: RecyclerView\n\n    // Model\n    private var user: User? = null\n    private lateinit var courses: ArrayList<Pair<Course, Uri?>>\n    private var courseAdapter: CourseAdapter? = null\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_account)\n\n        // Gets User Credentials\n        user = intent.getParcelableExtra(AppTags.USER_OBJECT.name)\n\n        // Configure UI\n        configureUserThumbnailImageView()\n        configureFollowersButton()\n        configureSettingsButton()\n        configureCreateButton()\n        configureRecycleView()\n\n        // Update UI with User Credentials\n        updateUserCredentials()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    private fun updateUserCredentials() {\n        runBlocking {\n            launch {\n                val weakReference = WeakReference<ContentResolver>(contentResolver)\n                val bitmap = AsyncHelpers().loadUserThumbnail(user?.getThumbnailFile(), weakReference)\n                onUserDataReturned(bitmap) }\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun onBackPressed() {\n        tellFragments()\n        super.onBackPressed()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    private fun tellFragments() {\n        val fragments: List<Fragment> = supportFragmentManager.fragments\n        for (f in fragments) {\n            if (f is EditCourseSummaryFragment) {\n                f.onBackPressed()\n            }\n        }\n    }\n\n\n    private fun configureCreateButton() {\n        createButton = findViewById(R.id.btn_create)\n\n        createButton.setOnClickListener {\n            val weakReference = WeakReference<Activity>(this)\n            if (PermissionsHelper.checkAndRequestPermissions(weakReference, PermissionsEnum.CREATE_COURSE_SELECTION)) {\n                val course = Course(UUID.randomUUID(), user)\n                course.setCreationDate(System.currentTimeMillis())\n                val createCourseSummaryFragment: CreateCourseSummaryFragment =\n                    CreateCourseSummaryFragment.newInstance(course)\n\n                supportFragmentManager.beginTransaction()\n                    .add(R.id.fragment_container_view, createCourseSummaryFragment, null)\n                    .addToBackStack(AppTags.CREATE_COURSE_SUMMARY_FRAGMENT.name)\n                    .setReorderingAllowed(true)\n                    .commit()\n            }\n\n\n\n        }\n    }\n\n    private fun configureUserThumbnailImageView() {\n        userThumbnailImageView = findViewById(R.id.im_account)\n    }\n\n    private fun configureFollowersButton() {\n        followersButton = findViewById(R.id.btn_followers)\n        followersButton.setOnClickListener {\n            // TODO - this will display the Users the current user is following - allows for deletion/access straight to their profile\n        }\n    }\n\n    private fun configureSettingsButton() {\n        settingsButton = findViewById(R.id.btn_settings)\n        settingsButton.setOnClickListener {\n            // TODO - this will display account settings: deleting account, changing password if Internet, etc.\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    private fun configureRecycleView() {\n        courseRecycleView = findViewById(R.id.grid_courses)\n        courseRecycleView.layoutManager =\n            GridLayoutManager(this, 2, GridLayoutManager.VERTICAL, false)\n\n        getCoursesFromFiles()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    private fun getCoursesFromFiles() {\n        val coursePath = Paths.get(\n            getExternalFilesDir(null).toString(),\n            FileEnum.USER_DIRECTORY.key,\n            FileEnum.COURSE_DIRECTORY.key\n        )\n        val params = AsyncHelpers.CreatorCourseCredentialsLoad.TaskParams(coursePath, user)\n        AsyncHelpers.CreatorCourseCredentialsLoad(this).execute(params)\n    }\n\n    private fun onUserDataReturned(imageBitmap: Bitmap?) {\n        if (imageBitmap != null) {\n            userThumbnailImageView.setImageBitmap(imageBitmap)\n        }\n    }\n\n\n    override fun onCreatorCourseCredentialsLoad(courses: ArrayList<Pair<Course, Uri?>>) {\n        this.courses = courses\n        updateRecycleView()\n    }\n\n    private fun updateRecycleView() {\n        courseAdapter?.notifyDataSetChanged()\n\n        val weakReference = WeakReference<Context>(this)\n        courseAdapter = CourseAdapter(weakReference, this.courses, this)\n        courseRecycleView.adapter = courseAdapter\n    }\n\n    override fun notifyCourseSelected(course: Course) {\n\n        val weakReference = WeakReference<Activity>(this)\n        if (PermissionsHelper.checkAndRequestPermissions(weakReference, PermissionsEnum.READ_COURSE)) {\n\n            val editCourseSummaryFragment: EditCourseSummaryFragment =\n                EditCourseSummaryFragment.newInstance(course)\n\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_view, editCourseSummaryFragment, null)\n                .addToBackStack(AppTags.EDIT_COURSE_SUMMARY_FRAGMENT.name)\n                .setReorderingAllowed(true)\n                .commit()\n        }\n    }\n\n    override fun onCourseDeleted(result: Course?) {\n        var position = -1\n\n        for (course in courses) {\n            if (result?.getCourseUUID() == course.first.getCourseUUID()) {\n                position = courses.indexOf(course)\n            }\n        }\n\n        if (position != -1) {\n            courses.removeAt(position)\n            courseAdapter?.notifyItemRemoved(position)\n            courseAdapter?.notifyItemRangeChanged(position, courses.size)\n\n        }\n\n        supportFragmentManager.popBackStack()\n    }\n\n    override fun onCourseCreate(course: Pair<Course, Uri?>) {\n        courses.add(course)\n        courseAdapter?.notifyItemInserted(courses.size - 1)\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onResume() {\n        super.onResume()\n        getCoursesFromFiles()\n        courseAdapter?.notifyDataSetChanged()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/baro/ui/account/AccountActivity.kt	(revision 70cac004d659d6dfd3c79a18b60624c0614f8f29)
+++ app/src/main/java/com/baro/ui/account/AccountActivity.kt	(date 1625413466218)
@@ -110,7 +110,7 @@
                     CreateCourseSummaryFragment.newInstance(course)
 
                 supportFragmentManager.beginTransaction()
-                    .add(R.id.fragment_container_view, createCourseSummaryFragment, null)
+                    .add(R.id.fragment_container_peer_connection, createCourseSummaryFragment, null)
                     .addToBackStack(AppTags.CREATE_COURSE_SUMMARY_FRAGMENT.name)
                     .setReorderingAllowed(true)
                     .commit()
@@ -188,7 +188,7 @@
                 EditCourseSummaryFragment.newInstance(course)
 
             supportFragmentManager.beginTransaction()
-                .add(R.id.fragment_container_view, editCourseSummaryFragment, null)
+                .add(R.id.fragment_container_peer_connection, editCourseSummaryFragment, null)
                 .addToBackStack(AppTags.EDIT_COURSE_SUMMARY_FRAGMENT.name)
                 .setReorderingAllowed(true)
                 .commit()
