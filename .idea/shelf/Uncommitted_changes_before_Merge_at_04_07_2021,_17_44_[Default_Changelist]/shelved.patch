Index: app/src/main/java/com/baro/ui/account/AccountActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.baro.ui.account\n\nimport android.app.Activity\nimport android.content.ContentResolver\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.widget.ImageButton\nimport android.widget.ImageView\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.baro.R\nimport com.baro.adapters.CourseAdapter\nimport com.baro.constants.AppTags\nimport com.baro.constants.FileEnum\nimport com.baro.constants.PermissionsEnum\nimport com.baro.helpers.AsyncHelpers\nimport com.baro.helpers.PermissionsHelper\nimport com.baro.helpers.interfaces.OnCourseCreate\nimport com.baro.helpers.interfaces.OnCourseCredentialsSaveComplete\nimport com.baro.helpers.AsyncHelpers.OnCourseDeleted\nimport com.baro.helpers.interfaceweaks.OnCreatorCourseCredentialsLoad\nimport com.baro.models.Course\nimport com.baro.models.User\nimport com.baro.ui.create.CreateCourseSummaryFragment\nimport com.baro.ui.create.EditCourseSummaryFragment\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.runBlocking\nimport java.lang.ref.WeakReference\nimport java.nio.file.Paths\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n\nclass AccountActivity : AppCompatActivity(), OnCreatorCourseCredentialsLoad,\n    CourseAdapter.OnCourseSelected, OnCourseCredentialsSaveComplete, OnCourseDeleted, OnCourseCreate{\n    // UI\n    private lateinit var userThumbnailImageView: ImageView\n    private lateinit var followersButton: ImageButton\n    private lateinit var settingsButton: ImageButton\n    private lateinit var createButton: ImageButton\n    private lateinit var courseRecycleView: RecyclerView\n\n    // Model\n    private var user: User? = null\n    private lateinit var courses: ArrayList<Pair<Course, Uri?>>\n    private var courseAdapter: CourseAdapter? = null\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_account)\n\n        // Gets User Credentials\n        user = intent.getParcelableExtra(AppTags.USER_OBJECT.name)\n\n        // Configure UI\n        configureUserThumbnailImageView()\n        configureFollowersButton()\n        configureSettingsButton()\n        configureCreateButton()\n        configureRecycleView()\n\n        // Update UI with User Credentials\n        updateUserCredentials()\n\n\n    }\n\n    @RequiresApi(Build.VERSION_CODES.P)\n    private fun updateUserCredentials() {\n        runBlocking {\n            launch {\n                val weakReference = WeakReference<ContentResolver>(contentResolver)\n                val bitmap = AsyncHelpers().loadUserThumbnail(user?.getThumbnailFile(), weakReference)\n                onUserDataReturned(bitmap) }\n        }\n    }\n\n    override fun onBackPressed() {\n        tellFragments()\n        super.onBackPressed()\n    }\n\n    private fun tellFragments() {\n        val fragments: List<Fragment> = supportFragmentManager.fragments\n        for (f in fragments) {\n            if (f is EditCourseSummaryFragment) {\n                f.onBackPressed()\n            }\n        }\n    }\n\n\n    private fun configureCreateButton() {\n        createButton = findViewById(R.id.btn_create)\n\n        createButton.setOnClickListener {\n            val weakReference = WeakReference<Activity>(this)\n            if (PermissionsHelper.checkAndRequestPermissions(weakReference, PermissionsEnum.CREATE_COURSE_SELECTION)) {\n                val course = Course(UUID.randomUUID(), user)\n                course.setCreationDate(System.currentTimeMillis())\n                val createCourseSummaryFragment: CreateCourseSummaryFragment =\n                    CreateCourseSummaryFragment.newInstance(course)\n\n                supportFragmentManager.beginTransaction()\n                    .add(R.id.fragment_container_view, createCourseSummaryFragment, null)\n                    .addToBackStack(AppTags.CREATE_COURSE_SUMMARY_FRAGMENT.name)\n                    .setReorderingAllowed(true)\n                    .commit()\n            }\n\n\n\n        }\n    }\n\n    private fun configureUserThumbnailImageView() {\n        userThumbnailImageView = findViewById(R.id.im_account)\n    }\n\n    private fun configureFollowersButton() {\n        followersButton = findViewById(R.id.btn_followers)\n        followersButton.setOnClickListener {\n            // TODO - this will display the Users the current user is following - allows for deletion/access straight to their profile\n        }\n    }\n\n    private fun configureSettingsButton() {\n        settingsButton = findViewById(R.id.btn_settings)\n        settingsButton.setOnClickListener {\n            // TODO - this will display account settings: deleting account, changing password if Internet, etc.\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    private fun configureRecycleView() {\n        courseRecycleView = findViewById(R.id.grid_courses)\n        courseRecycleView.layoutManager =\n            GridLayoutManager(this, 2, GridLayoutManager.VERTICAL, false)\n\n        getCoursesFromFiles()\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    private fun getCoursesFromFiles() {\n        val coursePath = Paths.get(\n            getExternalFilesDir(null).toString(),\n            FileEnum.USER_DIRECTORY.key,\n            FileEnum.COURSE_DIRECTORY.key\n        )\n        val params = AsyncHelpers.CreatorCourseCredentialsLoad.TaskParams(coursePath, user)\n        AsyncHelpers.CreatorCourseCredentialsLoad(this).execute(params)\n    }\n\n    private fun onUserDataReturned(imageBitmap: Bitmap?) {\n        if (imageBitmap != null) {\n            userThumbnailImageView.setImageBitmap(imageBitmap)\n        }\n    }\n\n\n    override fun onCreatorCourseCredentialsLoad(courses: ArrayList<Pair<Course, Uri?>>) {\n        this.courses = courses\n        updateRecycleView()\n    }\n\n    private fun updateRecycleView() {\n        courseAdapter?.notifyDataSetChanged()\n\n        val weakReference = WeakReference<Context>(this)\n        courseAdapter = CourseAdapter(weakReference, this.courses, this)\n        courseRecycleView.adapter = courseAdapter\n    }\n\n    override fun notifyCourseSelected(course: Course) {\n\n        val weakReference = WeakReference<Activity>(this)\n        if (PermissionsHelper.checkAndRequestPermissions(weakReference, PermissionsEnum.READ_COURSE)) {\n\n            val editCourseSummaryFragment: EditCourseSummaryFragment =\n                EditCourseSummaryFragment.newInstance(course)\n\n            supportFragmentManager.beginTransaction()\n                .add(R.id.fragment_container_view, editCourseSummaryFragment, null)\n                .addToBackStack(AppTags.EDIT_COURSE_SUMMARY_FRAGMENT.name)\n                .setReorderingAllowed(true)\n                .commit()\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCourseDataReturned(result: Boolean?) {\n        getCoursesFromFiles()\n        courseAdapter?.notifyDataSetChanged()\n    }\n\n    override fun onCourseDeleted(result: Course?) {\n        var position = -1\n\n        for (course in courses) {\n            if (result?.getCourseUUID() == course.first.getCourseUUID()) {\n                position = courses.indexOf(course)\n            }\n        }\n\n        if (position != -1) {\n            courses.removeAt(position)\n            courseAdapter?.notifyItemRemoved(position)\n            courseAdapter?.notifyItemRangeChanged(position, courses.size)\n\n        }\n\n        supportFragmentManager.popBackStack()\n    }\n\n    override fun onCourseCreate(course: Pair<Course, Uri?>) {\n        courses.add(course)\n        courseAdapter?.notifyItemInserted(courses.size - 1)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/baro/ui/account/AccountActivity.kt	(revision 3a2ee2f7d54ba082c35f606a82c2b22802b00e21)
+++ app/src/main/java/com/baro/ui/account/AccountActivity.kt	(date 1625413241129)
@@ -109,7 +109,7 @@
                     CreateCourseSummaryFragment.newInstance(course)
 
                 supportFragmentManager.beginTransaction()
-                    .add(R.id.fragment_container_view, createCourseSummaryFragment, null)
+                    .add(R.id.fragment_container_peer_connection, createCourseSummaryFragment, null)
                     .addToBackStack(AppTags.CREATE_COURSE_SUMMARY_FRAGMENT.name)
                     .setReorderingAllowed(true)
                     .commit()
@@ -187,7 +187,7 @@
                 EditCourseSummaryFragment.newInstance(course)
 
             supportFragmentManager.beginTransaction()
-                .add(R.id.fragment_container_view, editCourseSummaryFragment, null)
+                .add(R.id.fragment_container_peer_connection, editCourseSummaryFragment, null)
                 .addToBackStack(AppTags.EDIT_COURSE_SUMMARY_FRAGMENT.name)
                 .setReorderingAllowed(true)
                 .commit()
